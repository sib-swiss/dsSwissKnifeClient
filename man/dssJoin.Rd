% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dssJoin.R
\name{dssJoin}
\alias{dssJoin}
\title{Join 2 or more dataframes}
\usage{
dssJoin(
  what = NULL,
  symbol = NULL,
  by = NULL,
  join.type = "full",
  async = TRUE,
  datasources = NULL
)
}
\arguments{
\item{what}{a vector of names of dataframes}

\item{symbol}{the name of the new dataframe}

\item{by}{a character or a named vector, this goes straight into the 'by' parameter of dplyr::xxx_join. If nothing is supplied, 'SUBJID' is assumed.
As per the dplyr documentation, to join by different variables on x and y use a named vector.
For example, by = c("a" = "b") will match x.a to y.b.}

\item{join.type}{a character, the type of the join, the possible values are above. Default is 'full'}

\item{async}{same as in datashield.assign}

\item{datasources}{same as in datashield.assign}
}
\value{
It doesn't return anything,  it creates a dataframe, the result of the join
}
\description{
Applies dplyr::xxx_join on the local nodes where xxx can be any of ('inner', 'full', 'left', 'right', 'semi', 'anti')
}
\examples{
# open a local pseudo connection:
opals <- dssCreatePseudoServers(servers = 1, tie_first_to_GlobalEnv = 1)
# load iris
data('iris')
# join iris with itself just for fun:
dssJoin(c('iris', 'iris'), symbol = 'joined_iris', by = 'Sepal.Length', join.type = 'inner', datasources = opals)
str(joined_iris)

}
