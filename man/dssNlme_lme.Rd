% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dssNlme.R
\name{dssNlme_lme}
\alias{dssNlme_lme}
\title{Calls nlme::lme on the provided arguments}
\usage{
dssNlme_lme(..., async = TRUE, datasources = NULL)
}
\arguments{
\item{...}{further arguments to be passed to nlme::lme. The data argument must pe passed as a character, the name of the input dataframe}

\item{async}{same as in datashield.assign}

\item{datasources}{same as in datashield.assign}

\item{newobj}{a character, name of the new dataframe}
}
\value{
a stripped down lmeObject (without the 'data' and 'call' elements). See the documentation for lme and lmeObject in package lme.
}
\description{
See the documentation of lme in package nlme
}
\examples{
# open a local pseudo connection:
library(DSLite)
dslite.server1 <<- newDSLiteServer(config = defaultDSConfiguration(include=c('dsSwissKnife')))
builder <- newDSLoginBuilder()
builder$append(server="server1", url='dslite.server1',driver = "DSLiteDriver")
logindata <- builder$build()
opals <- datashield.login(logins = logindata)#' # load the Orthodont dataset
# load the Orthodont dataset
 datashield.aggregate(opals[1], as.symbol('partialData("Orthodont", NULL, NULL, "nlme")'))
  dssNlme_groupedData(newobj = 'grouped', formula =  distance ~ age | Subject, data ='Orthodont', async = FALSE, datasources = opals[1] )
 lme.model <- dssNlme_lme(fixed = distance ~ age, data = 'grouped', random = ~ 1, async = FALSE, datasources = opals[1])
summary(lme.model[[1]])

}
